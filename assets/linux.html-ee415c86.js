import{_ as s,M as n,p as e,q as i,N as l,a1 as t}from"./framework-5866ffd3.js";const r={},d=t(`<h1 id="云服务部署命令" tabindex="-1"><a class="header-anchor" href="#云服务部署命令" aria-hidden="true">#</a> 云服务部署命令</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>云服务部署SpringBoot项目</p></div><h2 id="一、linux-安装jdk1-8" tabindex="-1"><a class="header-anchor" href="#一、linux-安装jdk1-8" aria-hidden="true">#</a> 一、Linux 安装JDK1.8</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>yum install <span class="token operator">-</span>y java<span class="token operator">-</span><span class="token number">1.8</span><span class="token number">.0</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>devel<span class="token punctuation">.</span>x86_64
java <span class="token operator">-</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、linux-部署" tabindex="-1"><a class="header-anchor" href="#二、linux-部署" aria-hidden="true">#</a> 二、Linux 部署</h2><ul><li>在linux服务器上运行Jar文件时通常的方法是： java -jar test.jar</li><li>这种方式特点是ssh窗口关闭时，程序中止运行.或者是运行时没法切出去执行其他任务，有没有办法让Jar在后台运行呢：</li></ul><p>方式一：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> test.jar <span class="token operator">&amp;</span>
//nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行
//当用 <span class="token function">nohup</span> 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中
//除非另外指定了输出文件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> test.jar <span class="token operator">&gt;</span>log.txt <span class="token operator">&amp;</span>
//这种方法会把日志文件输入到你指定的文件中，没有则会自动创建
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>查看某端口占用的线程的pid</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-nlp</span> <span class="token operator">|</span><span class="token function">grep</span> :8080 <span class="token comment"># 查看端口号</span>
命令：ps <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token function">java</span> <span class="token comment"># 查询java进程</span>
<span class="token function">kill</span> pid 杀死进程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器开放端口号：</p><p>服务器设置防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span>端口号/tcp <span class="token parameter variable">--permanent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启服务器防火墙</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--reload</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看日志：</p><p>https://blog.csdn.net/summerwgl/article/details/125423926</p><p>介绍一种：<code>tail</code>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>//查看实时日志
$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> test.log
//查看最后100行日志记录
$ <span class="token function">tail</span> <span class="token parameter variable">-100f</span> test.log
//查询日志尾部最后10行的日志
$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> test.log
//查询10行之后的所有日志
$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> +10 test.log
//循环实时查看最后100行记录
$ <span class="token function">tail</span> <span class="token parameter variable">-fn</span> <span class="token number">100</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>1）-f 循环读取 2）-q 不显示处理信息 3）-v 显示详细的处理信息 4）-c&lt;数目&gt; 显示的字节数 5）-n&lt;行数&gt; 显示行数</p></blockquote><p>docker查看容器日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">--tail</span> <span class="token parameter variable">-n300</span> kworkflow-web_8080
<span class="token function">docker</span> logs <span class="token parameter variable">-f</span> kworkflow-web_8080
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、docker部署" tabindex="-1"><a class="header-anchor" href="#三、docker部署" aria-hidden="true">#</a> 三、Docker部署</h2><p>docker查看容器地址</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect kworkflow-web_8080 <span class="token operator">|</span> <span class="token function">grep</span> Mounts <span class="token parameter variable">-A</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编写Dockerfile文件</p><p>找到刚刚上传jar包的目录，使用vim命令编写一个Dockerfile文件，按照下面模板便可简单编写出Dockerfile文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取jdk8作为基础镜像</span>
FROM java:8
<span class="token comment"># 作者</span>
MAINTAINER kz <span class="token operator">&lt;</span>@163.com<span class="token operator">&gt;</span>
<span class="token comment"># 添加jar到镜像并命名为code.jar</span>
ADD codingstart-1.0.jar code.jar
<span class="token comment"># 镜像启动后暴露的端口</span>
EXPOSE <span class="token number">8181</span>
<span class="token comment"># jar运行命令，参数使用逗号隔开</span>
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span>,<span class="token string">&quot;-jar&quot;</span>,<span class="token string">&quot;code.jar&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、windos端口占用" tabindex="-1"><a class="header-anchor" href="#四、windos端口占用" aria-hidden="true">#</a> 四、Windos端口占用</h2><p>查找所有运行的端口</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>netstat -ano
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看被占用端口对应的 PID</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>netstat -aon|findstr &quot;1099&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看指定 PID 的进程</p><p><img src="https://cdn.staticaly.com/gh/Steven-kz/BlogImgs@master/imgaes/1.png" alt="image-20230309133951356"></p><p>查看是哪个进程或者程序占用端口</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>tasklist|findstr &quot;18112&quot;
taskkill /f /t /im java.exe //强制（/F参数）杀死 所有进程包括子进程（/T参数）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,39);function c(p,o){const a=n("Vssue");return e(),i("div",null,[d,l(a)])}const v=s(r,[["render",c],["__file","linux.html.vue"]]);export{v as default};
