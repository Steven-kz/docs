const l=JSON.parse('{"key":"v-707915a0","path":"/interview/Java.html","title":"Java基础面试题","lang":"zh-CN","frontmatter":{"title":"Java基础面试题"},"headers":[{"level":2,"title":"Java概述","slug":"java概述","link":"#java概述","children":[{"level":3,"title":"Java语言有哪些特点？","slug":"java语言有哪些特点","link":"#java语言有哪些特点","children":[]},{"level":3,"title":"Java和C++有什么关系，它们有什么区别？","slug":"java和c-有什么关系-它们有什么区别","link":"#java和c-有什么关系-它们有什么区别","children":[]},{"level":3,"title":"JVM、JRE和JDK的关系是什么？","slug":"jvm、jre和jdk的关系是什么","link":"#jvm、jre和jdk的关系是什么","children":[]},{"level":3,"title":"什么是字节码?","slug":"什么是字节码","link":"#什么是字节码","children":[]},{"level":3,"title":"采用字节码的好处是什么?","slug":"采用字节码的好处是什么","link":"#采用字节码的好处是什么","children":[]},{"level":3,"title":"Oracle JDK 和 OpenJDK 的区别是什么？","slug":"oracle-jdk-和-openjdk-的区别是什么","link":"#oracle-jdk-和-openjdk-的区别是什么","children":[]}]},{"level":2,"title":"基础语法","slug":"基础语法","link":"#基础语法","children":[{"level":3,"title":"Java有哪些数据类型？","slug":"java有哪些数据类型","link":"#java有哪些数据类型","children":[]},{"level":3,"title":"switch 是否能作用在 byte 上，是否能作用在 long 上，是否能作用在 String 上？","slug":"switch-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上","link":"#switch-是否能作用在-byte-上-是否能作用在-long-上-是否能作用在-string-上","children":[]},{"level":3,"title":"访问修饰符public、private、protected、以及不写（默认）时的区别？","slug":"访问修饰符public、private、protected、以及不写-默认-时的区别","link":"#访问修饰符public、private、protected、以及不写-默认-时的区别","children":[]},{"level":3,"title":"break ,continue ,return 的区别及作用？","slug":"break-continue-return-的区别及作用","link":"#break-continue-return-的区别及作用","children":[]}]},{"level":2,"title":"关键字","slug":"关键字","link":"#关键字","children":[{"level":3,"title":"final、finally、finalize的区别？","slug":"final、finally、finalize的区别","link":"#final、finally、finalize的区别","children":[]},{"level":3,"title":"为什么要用static关键字？","slug":"为什么要用static关键字","link":"#为什么要用static关键字","children":[]},{"level":3,"title":"”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？","slug":"static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法","link":"#static-关键字是什么意思-java中是否可以覆盖-override-一个private或者是static的方法","children":[]},{"level":3,"title":"是否可以在static环境中访问非static变量？","slug":"是否可以在static环境中访问非static变量","link":"#是否可以在static环境中访问非static变量","children":[]},{"level":3,"title":"static静态方法能不能引用非静态资源？","slug":"static静态方法能不能引用非静态资源","link":"#static静态方法能不能引用非静态资源","children":[]},{"level":3,"title":"static静态方法里面能不能引用静态资源？","slug":"static静态方法里面能不能引用静态资源","link":"#static静态方法里面能不能引用静态资源","children":[]},{"level":3,"title":"非静态方法里面能不能引用静态资源？","slug":"非静态方法里面能不能引用静态资源","link":"#非静态方法里面能不能引用静态资源","children":[]},{"level":3,"title":"java静态变量、代码块、和静态方法的执行顺序是什么？","slug":"java静态变量、代码块、和静态方法的执行顺序是什么","link":"#java静态变量、代码块、和静态方法的执行顺序是什么","children":[]}]},{"level":2,"title":"面向对象","slug":"面向对象","link":"#面向对象","children":[{"level":3,"title":"面向对象和面向过程的区别？","slug":"面向对象和面向过程的区别","link":"#面向对象和面向过程的区别","children":[]},{"level":3,"title":"讲讲面向对象三大特性","slug":"讲讲面向对象三大特性","link":"#讲讲面向对象三大特性","children":[]},{"level":3,"title":"Java语言是如何实现多态的？","slug":"java语言是如何实现多态的","link":"#java语言是如何实现多态的","children":[]},{"level":3,"title":"重载（Overload）和重写（Override）的区别是什么？","slug":"重载-overload-和重写-override-的区别是什么","link":"#重载-overload-和重写-override-的区别是什么","children":[]},{"level":3,"title":"重载的方法能否根据返回值类型进行区分？","slug":"重载的方法能否根据返回值类型进行区分","link":"#重载的方法能否根据返回值类型进行区分","children":[]},{"level":3,"title":"构造器（constructor）是否可被重写（override）？","slug":"构造器-constructor-是否可被重写-override","link":"#构造器-constructor-是否可被重写-override","children":[]},{"level":3,"title":"抽象类和接口的区别是什么？","slug":"抽象类和接口的区别是什么","link":"#抽象类和接口的区别是什么","children":[]},{"level":3,"title":"抽象类能使用 final 修饰吗？","slug":"抽象类能使用-final-修饰吗","link":"#抽象类能使用-final-修饰吗","children":[]},{"level":3,"title":"java 创建对象有哪几种方式？","slug":"java-创建对象有哪几种方式","link":"#java-创建对象有哪几种方式","children":[]},{"level":3,"title":"什么是不可变对象?好处是什么?","slug":"什么是不可变对象-好处是什么","link":"#什么是不可变对象-好处是什么","children":[]},{"level":3,"title":"能否创建一个包含可变对象的不可变对象?","slug":"能否创建一个包含可变对象的不可变对象","link":"#能否创建一个包含可变对象的不可变对象","children":[]},{"level":3,"title":"值传递和引用传递的区别的什么？为什么说Java中只有值传递？","slug":"值传递和引用传递的区别的什么-为什么说java中只有值传递","link":"#值传递和引用传递的区别的什么-为什么说java中只有值传递","children":[]}]},{"level":2,"title":"对象相等判断","slug":"对象相等判断","link":"#对象相等判断","children":[{"level":3,"title":"== 和 equals 区别是什么？","slug":"和-equals-区别是什么","link":"#和-equals-区别是什么","children":[]},{"level":3,"title":"介绍下hashCode()？","slug":"介绍下hashcode","link":"#介绍下hashcode","children":[]},{"level":3,"title":"为什么要有 hashCode?","slug":"为什么要有-hashcode","link":"#为什么要有-hashcode","children":[]},{"level":3,"title":"hashCode(),equals()两种方法是什么关系?","slug":"hashcode-equals-两种方法是什么关系","link":"#hashcode-equals-两种方法是什么关系","children":[]},{"level":3,"title":"为什么重写 equals 方法必须重写 hashcode 方法 \uFEFF？","slug":"为什么重写-equals-方法必须重写-hashcode-方法","link":"#为什么重写-equals-方法必须重写-hashcode-方法","children":[]},{"level":3,"title":"String,StringBuffer, StringBuilder 的区别是什么？","slug":"string-stringbuffer-stringbuilder-的区别是什么","link":"#string-stringbuffer-stringbuilder-的区别是什么","children":[]},{"level":3,"title":"String为什么要设计成不可变的？","slug":"string为什么要设计成不可变的","link":"#string为什么要设计成不可变的","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]},{"level":2,"title":"String相关","slug":"string相关","link":"#string相关","children":[{"level":3,"title":"字符型常量和字符串常量的区别？","slug":"字符型常量和字符串常量的区别","link":"#字符型常量和字符串常量的区别","children":[]},{"level":3,"title":"什么是字符串常量池？","slug":"什么是字符串常量池","link":"#什么是字符串常量池","children":[]},{"level":3,"title":"String str=\\"aaa\\"与 String str=new String(\\"aaa\\")一样吗？","slug":"string-str-aaa-与-string-str-new-string-aaa-一样吗","link":"#string-str-aaa-与-string-str-new-string-aaa-一样吗","children":[]},{"level":3,"title":"new String(“aaa”);创建了几个字符串对象?","slug":"new-string-aaa-创建了几个字符串对象","link":"#new-string-aaa-创建了几个字符串对象","children":[]},{"level":3,"title":"String 是最基本的数据类型吗?","slug":"string-是最基本的数据类型吗","link":"#string-是最基本的数据类型吗","children":[]},{"level":3,"title":"String有哪些特性?","slug":"string有哪些特性","link":"#string有哪些特性","children":[]},{"level":3,"title":"在使用 HashMap 的时候，用 String 做 key 有什么好处？","slug":"在使用-hashmap-的时候-用-string-做-key-有什么好处","link":"#在使用-hashmap-的时候-用-string-做-key-有什么好处","children":[]}]},{"level":2,"title":"包装类型","slug":"包装类型","link":"#包装类型","children":[{"level":3,"title":"包装类型是什么？基本类型和包装类型有什么区别？","slug":"包装类型是什么-基本类型和包装类型有什么区别","link":"#包装类型是什么-基本类型和包装类型有什么区别","children":[]},{"level":3,"title":"解释一下自动装箱和自动拆箱？","slug":"解释一下自动装箱和自动拆箱","link":"#解释一下自动装箱和自动拆箱","children":[]},{"level":3,"title":"int 和 Integer 有什么区别?","slug":"int-和-integer-有什么区别","link":"#int-和-integer-有什么区别","children":[]},{"level":3,"title":"两个new生成的Integer变量的对比","slug":"两个new生成的integer变量的对比","link":"#两个new生成的integer变量的对比","children":[]},{"level":3,"title":"Integer变量和int变量的对比","slug":"integer变量和int变量的对比","link":"#integer变量和int变量的对比","children":[]},{"level":3,"title":"非new生成的Integer变量和new Integer()生成变量的对比","slug":"非new生成的integer变量和new-integer-生成变量的对比","link":"#非new生成的integer变量和new-integer-生成变量的对比","children":[]},{"level":3,"title":"两个非new生成的Integer对象的对比","slug":"两个非new生成的integer对象的对比","link":"#两个非new生成的integer对象的对比","children":[]}]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"什么是反射？","slug":"什么是反射","link":"#什么是反射","children":[]},{"level":3,"title":"反射机制的优缺点有哪些？","slug":"反射机制的优缺点有哪些","link":"#反射机制的优缺点有哪些","children":[]},{"level":3,"title":"如何获取反射中的Class对象？","slug":"如何获取反射中的class对象","link":"#如何获取反射中的class对象","children":[]},{"level":3,"title":"Java反射API有几类？","slug":"java反射api有几类","link":"#java反射api有几类","children":[]},{"level":3,"title":"反射使用的步骤？","slug":"反射使用的步骤","link":"#反射使用的步骤","children":[]},{"level":3,"title":"为什么引入反射概念？反射机制的应用有哪些？","slug":"为什么引入反射概念-反射机制的应用有哪些","link":"#为什么引入反射概念-反射机制的应用有哪些","children":[]},{"level":3,"title":"反射机制的原理是什么？","slug":"反射机制的原理是什么","link":"#反射机制的原理是什么","children":[]}]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[{"level":3,"title":"Java中的泛型是什么 ?","slug":"java中的泛型是什么","link":"#java中的泛型是什么","children":[]},{"level":3,"title":"使用泛型的好处是什么?","slug":"使用泛型的好处是什么","link":"#使用泛型的好处是什么","children":[]},{"level":3,"title":"Java泛型的原理是什么 ? 什么是类型擦除 ?","slug":"java泛型的原理是什么-什么是类型擦除","link":"#java泛型的原理是什么-什么是类型擦除","children":[]},{"level":3,"title":"什么是泛型中的限定通配符和非限定通配符 ?","slug":"什么是泛型中的限定通配符和非限定通配符","link":"#什么是泛型中的限定通配符和非限定通配符","children":[]},{"level":3,"title":"List<? extends T>和List <? super T>之间有什么区别 ?","slug":"list-extends-t-和list-super-t-之间有什么区别","link":"#list-extends-t-和list-super-t-之间有什么区别","children":[]},{"level":3,"title":"可以把List<String>传递给一个接受List<Object>参数的方法吗？","slug":"可以把list-string-传递给一个接受list-object-参数的方法吗","link":"#可以把list-string-传递给一个接受list-object-参数的方法吗","children":[]},{"level":3,"title":"Array中可以用泛型吗?","slug":"array中可以用泛型吗","link":"#array中可以用泛型吗","children":[]},{"level":3,"title":"判断ArrayList<String>与ArrayList<Integer>是否相等？","slug":"判断arraylist-string-与arraylist-integer-是否相等","link":"#判断arraylist-string-与arraylist-integer-是否相等","children":[]}]},{"level":2,"title":"序列化","slug":"序列化","link":"#序列化","children":[{"level":3,"title":"Java序列化与反序列化是什么？","slug":"java序列化与反序列化是什么","link":"#java序列化与反序列化是什么","children":[]},{"level":3,"title":"为什么需要序列化与反序列化？","slug":"为什么需要序列化与反序列化","link":"#为什么需要序列化与反序列化","children":[]},{"level":3,"title":"序列化实现的方式有哪些？","slug":"序列化实现的方式有哪些","link":"#序列化实现的方式有哪些","children":[]},{"level":3,"title":"什么是serialVersionUID？","slug":"什么是serialversionuid","link":"#什么是serialversionuid","children":[]},{"level":3,"title":"为什么还要显示指定serialVersionUID的值?","slug":"为什么还要显示指定serialversionuid的值","link":"#为什么还要显示指定serialversionuid的值","children":[]},{"level":3,"title":"serialVersionUID什么时候修改？","slug":"serialversionuid什么时候修改","link":"#serialversionuid什么时候修改","children":[]},{"level":3,"title":"Java 序列化中如果有些字段不想进行序列化，怎么办？","slug":"java-序列化中如果有些字段不想进行序列化-怎么办","link":"#java-序列化中如果有些字段不想进行序列化-怎么办","children":[]},{"level":3,"title":"静态变量会被序列化吗?","slug":"静态变量会被序列化吗","link":"#静态变量会被序列化吗","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"Error 和 Exception 区别是什么？","slug":"error-和-exception-区别是什么","link":"#error-和-exception-区别是什么","children":[]},{"level":3,"title":"非受检查异常(运行时异常)和受检查异常(一般异常)区别是什么？","slug":"非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么","link":"#非受检查异常-运行时异常-和受检查异常-一般异常-区别是什么","children":[]},{"level":3,"title":"throw 和 throws 的区别是什么？","slug":"throw-和-throws-的区别是什么","link":"#throw-和-throws-的区别是什么","children":[]},{"level":3,"title":"NoClassDefFoundError 和 ClassNotFoundException 区别？","slug":"noclassdeffounderror-和-classnotfoundexception-区别","link":"#noclassdeffounderror-和-classnotfoundexception-区别","children":[]},{"level":3,"title":"Java常见异常有哪些？","slug":"java常见异常有哪些","link":"#java常见异常有哪些","children":[]},{"level":3,"title":"try-catch-finally 中哪个部分可以省略？","slug":"try-catch-finally-中哪个部分可以省略","link":"#try-catch-finally-中哪个部分可以省略","children":[]},{"level":3,"title":"try-catch-finally 中，如果 catch 中 return 了，finally 还会执行吗？","slug":"try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","link":"#try-catch-finally-中-如果-catch-中-return-了-finally-还会执行吗","children":[]},{"level":3,"title":"JVM 是如何处理异常的？","slug":"jvm-是如何处理异常的","link":"#jvm-是如何处理异常的","children":[]}]},{"level":2,"title":"IO","slug":"io","link":"#io","children":[{"level":3,"title":"Java的IO 流分为几种？","slug":"java的io-流分为几种","link":"#java的io-流分为几种","children":[]},{"level":3,"title":"字节流如何转为字符流？","slug":"字节流如何转为字符流","link":"#字节流如何转为字符流","children":[]},{"level":3,"title":"字符流与字节流的区别？","slug":"字符流与字节流的区别","link":"#字符流与字节流的区别","children":[]},{"level":3,"title":"BIO、NIO、AIO的区别？","slug":"bio、nio、aio的区别","link":"#bio、nio、aio的区别","children":[]},{"level":3,"title":"Java IO都有哪些设计模式？","slug":"java-io都有哪些设计模式","link":"#java-io都有哪些设计模式","children":[]}]},{"level":2,"title":"参考","slug":"参考-1","link":"#参考-1","children":[]}],"git":{"updatedTime":1678630251000,"contributors":[{"name":"knightbreeze1","email":"knightbreeze@163.com","commits":1}]},"filePathRelative":"interview/Java.md"}');export{l as data};
